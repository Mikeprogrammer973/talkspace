// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id  Int @id @default(autoincrement())
  type String @default("Main")
  bio String?
  user User @relation(fields: [userId], references: [id])
  userId Int @unique
  username String @unique
  image Image? @relation(fields: [imageId], references: [id])
  imageId Int? @unique
  followers Follow[] @relation("follower")
  following Follow[] @relation("following")
  posts Post[]
  preferenceId Int @unique
  preference Preference @relation(fields: [preferenceId], references: [id])
}

model Follow {
  followerId Int
  followingId Int
  createdAt  DateTime @default(now())
  follower   Profile  @relation("follower", fields: [followerId], references: [id])
  following  Profile  @relation("following", fields: [followingId], references: [id])
  @@id([followerId, followingId])
}


model User {
  id Int @id @default(autoincrement())
  email String @unique
  name String?
  password String
  verificationCode String?
  emailVerified String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profiles Profile[]
}

model Preference {
  id Int @id @default(autoincrement())
  language String
  region_format String
  theme String
  accessibilbity String[]
  font_size String
  content String[]
  private Boolean
  ntf_follower String[]
  ntf_mention String[]
  ntf_like String[]
  ntf_comment String[]
  ntf_msg String[]
  ntf_follow_req String[]
  profile Profile?
}

model Post {
  id Int @id @default(autoincrement())
  type String 
  url String
  images Image[]
  profile Profile @relation(fields: [profileId], references: [id])
  profileId Int @unique
}

model Image {
  id Int @id @default(autoincrement())
  type String
  name String
  profile Profile?
  postId Int?
  post Post? @relation(fields: [postId], references: [id])
}

model Comment {
  id Int @id @default(autoincrement())
}
